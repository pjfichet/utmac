.\" ux: translate to xml.
.ig
Copyright (C) 2012-2018 Pierre Jean Fichet
<pierrejean dot fichet at posteo dot net>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" ux: translate to xml.
.
.nr tmac-ux 1
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" various macros
.de var:print
\&\\$*
..
.de var:null
..
.nh \" Do not hyphenate xml files
.nf \" Do not fill at all...
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" strings definition
.ig
Since we use .char to translate "<" , ">" and "&", and since
";" might be translated to "\~;", we can't use these glyphs to
build the xml file. We use #[ #] to define xml tags, and #(
#) to define chars.

Since troff usually print tags after a newline, we indicate
the newlines that need to be removed by #-

The dxml post processor will make a clean xml file from
this.
..
.ds xml-deline #-
.ds xml-tagbeg #[
.ds xml-tagend #]
.ds xml-glybeg #(
.ds xml-glyend #)
.ds xml-tag \\*[xml-tagbeg]\\$*\\*[xml-tagend]
.ds xml-gly \\*[xml-glybeg]\\$*\\*[xml-glyend]
.char < \\*[xml-gly lt]
.char > \\*[xml-gly gt]
.char & \\*[xml-gly amp]
.char - \[u002D]
.\" the detag pre-processor replace by strings
.\" tags inserted by the user. Escape these tags.
.ds #[ #~[
.ds #] #~]
.ds #( #~(
.ds #) #~)
.ds #- #~-
.ds #~ #~~
.de xml:print
.	\" print xml
.	br
.	\"fi
.	lang:xmlrchar
\&\\$*
.	br
.	lang:xmlchar
..
.\"""""""""""""""""""""""""""""""""""""""""""""""
.\" start and stop
.de xml:start
.	\" start xml file
.	em xml:stop
.	pl 1v
.	ll 60
.	na \" don't adjust
.	nh \" don't hyphenate
.	xml:print \\*[xml-tag ?xml version="1.0" encoding="UTF-8"?]
.	xml:print \\*[xml-tag UTMAC]
.	\" format date
.	ie \\n[mo]<10 .ds month 0\\n[mo]
.	el .ds month \\n[mo]
.	ie \\n[dy]<10 .ds day 0\\n[dy]
.	el .ds  day \\n[dy]
.	ie \\n[hours]<10 .ds hours 0\\n[hours]
.	el .ds hours \\n[hours]
.	ie \\n[minutes]<10 .ds minutes 0\\n[mo]
.	el .ds minutes \\n[minutes]
.	ie \\n[seconds]<10 .ds seconds 0\\n[seconds]
.	el .ds seconds \\n[seconds]
.	ds data-date1 \\n[year]-\\*[month]-\\*[day]
.	ds data-date2 \\*[hours]:\\*[minutes]:\\*[seconds]
.	xml:print \\*[xml-tag DD]\\*[data-date1]\
T\\*[data-date2]\\*[xml-tag /DD]
.	xml:print \\*[xml-tag DG]nroff -mux\\*[xml-tag /DG]
.	rm month
.	rm day
.	rm hours
.	rm minutes
.	rm seconds
.	rm data-date1
.	rm data-date2
..
.de xml:stop
.	\" stop xml file
.	\" See: http://lists.gnu.org/archive/html/groff/2009-04/msg00019.html
\c
.	ne 3v
.	lang:xmlrchar
.	if !"\\*[xml-block]"" \{\
.		br
\\*[xml-deline]
.		br
\\*[xml-block]
.	\}
.	br
\\*[xml-tag /UTMAC]
.	pl \\n(nlu
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" block macros
.de xml:block1
.	\" multine line block
.	if !"\\*[xml-block]"" \{\
.		xml:print \\*[xml-deline]
.		xml:print \\*[xml-block]
.	\}
.	sp 1v
.	xml:print \\*[xml-tag \\$1]
.	xml:print \\*[xml-deline]
.	ds xml-block \\*[xml-tag /\\$1]
.	fi
..
.de xml:block2
.	\" single line block
.	ds block2-tag \\$1
.	shift
.	if \\n(.$ \{\
.		if !"\\*[xml-block]"" \{\
.			xml:print \\*[xml-deline]
.			xml:print \\\\*[xml-block]
.			rm xml-block
.		\}
.		sp 1v
.		xml:print \\*[xml-tag \\*[block2-tag]]\\$*\
\\*[xml-tag /\\*[block2-tag]]
.	\}
.	fi
..
.de PB
.	xml:block1 PB
..
.de PP
.	xml:block1 PP
..
.de PC
.	xml:block1 PC
..
.de PQ
.	xml:block1 PQ
..
.de PL
.	xml:block1 PL
..
.de PR
.	xml:block1 PR
..
.de DA
.	xml:block2 DA \\$*
..
.de DF
.	xml:block2 DF \\$*
..
.de DI
.	xml:block2 DI \\$*
..
.de DK
.	xml:block2 DK \\$*
..
.de DS
.	xml:block2 DS \\$*
..
.de DT
.	xml:block2 DT \\$*
..
.de H1
.	xml:block2 H1 \\$*
..
.de H2
.	xml:block2 H2 \\$*
..
.de H3
.	xml:block2 H3 \\$*
..
.de H4
.	xml:block2 H4 \\$*
..
.de PX
.	if !"\\*[xml-block]"" \{\
.	xml:print \\*[xml-deline]
.	xml:print \\\\*[xml-block]
.	\}
.	sp 1v
.	ie \\n(.$=0 .xml:print \\*[xml-tag PX]
.	el .xml:print \\*[xml-tag PX name=\[dq]\\$1\[dq]]
.	xml:print \\*[xml-deline]
.	ds xml-block \\*[xml-tag /PX]
.	lang:xmlrchar
.	nf
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Lists
.de PI
.	ie !"\\*[xml-block]"" \{\
.		ie '\\*[xml-block]'\\*[xml-tag /PI]\\*[xml-tag /PLIST]' \{\
.			xml:print \\*[xml-deline]
.			xml:print \\*[xml-tag /PI]
.		\}
.		el \{\
.			xml:print \\*[xml-deline]
.			xml:print \\\\*[xml-block]
.			sp 1v
.			xml:print \\*[xml-tag PLIST]
.			xml:print \\*[xml-deline]
.		\}
.	\}
.	el \{\
.		sp 1v
.		xml:print \\*[xml-tag PLIST]
.		xml:print \\*[xml-deline]
.	\}
.	xml:print \\*[xml-tag PI]
.	xml:print \\*[xml-deline]
.	if \\n(.$ \\$*:
.	ds xml-block \\*[xml-tag /PI]\\*[xml-tag /PLIST]
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Notes
.nr margin-num 0 1
.	\" print an unbreakable thin space before number
.ds * \[u202F]\\*[xml-tagbeg]NN num=\[dq]\\n+[margin-num]\[dq]/\\*[xml-tagend]
.nr note-in 0
.de NT
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag NT]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NT]
..
.de NB
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag NB]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NB]
..
.de NS
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	ie \\n(.$ .xml:print \\*[xml-tag NS]
.	el .xml:print \\*[xml-tagbeg]NS\ num=\[dq]\\n[margin-num]\[dq]\\*[xml-tagend]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NS]
..
.de NE
.	nr note-in 0
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-line]
.	rm xml-line
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" fonts
.ds font-bold0 \\*[xml-tag /B]
.ds font-bold1 \\*[xml-tag B]
.ds font-ital0 \\*[xml-tag /I]
.ds font-ital1 \\*[xml-tag I]
.ds font-caps0 \\*[xml-tag /C]
.ds font-caps1 \\*[xml-tag C]
.ds font-acro0 \\*[xml-tag /A]
.ds font-acro1 \\*[xml-tag A]
.ds font-uper0 \\*[xml-tag /U]
.ds font-uper1 \\*[xml-tag U]
.ds font-loer0 \\*[xml-tag /L]
.ds font-loer1 \\*[xml-tag L]
.ds font-fina0 \\*[xml-tag /F]
.ds font-fina1 \\*[xml-tag F]
.ds font-mono0 \\*[xml-tag /M]
.ds font-mono1 \\*[xml-tag M]
.ds B \ER'f-b 1-\En[f-b]'\E*[font-bold\En[f-b]]
.ds I \ER'f-i 1-\En[f-i]'\E*[font-ital\En[f-i]]
.ds C \ER'f-c 1-\En[f-c]'\E*[font-caps\En[f-c]]
.ds A \ER'f-a 1-\En[f-a]'\E*[font-acro\En[f-a]]
.ds U \ER'f-u 1-\En[f-u]'\E*[font-uper\En[f-u]]
.ds L \ER'f-l 1-\En[f-l]'\E*[font-loer\En[f-l]]
.ds F \ER'f-f 1-\En[f-f]'\E*[font-fina\En[f-f]]
.ds M \ER'f-m 1-\En[f-m]'\E*[font-mono\En[f-m]]
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" vgrind
.ds +K \\*[xml-tag codeK]
.ds -K \\*[xml-tag /codeK]
.ds +V \\*[xml-tag codeV]
.ds -V \\*[xml-tag /codeV]
.ds +C \\*[xml-tag codeC]
.ds -C \\*[xml-tag /codeC]
.ds +S \\*[xml-tag codeS]
.ds -S \\*[xml-tag /codeS]
.\"char - \[u002D] \" for groff
.ds - \-
.ds _ _
.ds e \e
.de vS
.	PX
..
.de vE
.	br
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag /PX]
.	rm xml-block
.	fi
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Link macros
.ds link-text
.ds link-beg
.ds link-end
.de LT
.	\" text to print
.	ds link-text \\$1
.	ds link-end \\$2
.	ds link-beg \\$3
..
.de link:print
.	\" Print link using text defined by .LT macro if it exists
.	\" $1: Keyword defining the kind of link
.	\" $2: url
.	\" $3, $4: text after and before
.	if "\\*[link-text]"" \{\
.		ds link-text \\$2
.		ds link-end \\$3
.		ds link-beg \\$4
.	\}
.	xml:print \\*[link-beg]\
\\*[xml-tagbeg]L\\$1 name=\[dq]\\$2\[dq]\\*[xml-tagend]\
\\*[link-text]\
\\*[xml-tagbeg]/L\\$1\\*[xml-tagend]\
\\*[link-end]
.	ds link-text
.	ds link-beg
.	ds link-end
..
.de LK
.	link:print K \\$*
..
.de LL
.	link:print L \\$*
..
.de LM
.	link:print M \\$*
..
.de LU
.	link:print U \\$*
..
.\"""""""""""""""""""""""""""""""""""""""""""""""""
.\" Index macros
.de idx:print
.	\" Insert a keyword
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag K\\$1 name=\[dq]\\$2\[dq]/]
.	xml:print \\*[xml-deline]
..
.de KA
.	idx:print A \\$*
..
.de KN
.	idx:print N \\$*
..
.de KO
.	idx:print O \\$*
..
.de KT
.	idx:print T \\$*
..
.de KW
.	idx:print W \\$*
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" source macros
.if !\n(.g \{\
.	\" For neatroff
.	de mso
.		so \n(.D/\\$1
\\..
.\}
.
.\"mso u-ref.tmac
.\"RO \" remove opcit
.\"if !\n[tmac-u-lang] .mso u-en.tmac
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\"als H0 var:null
.\"als H* var:null
.\"als S1 var:null
.\"als S2 var:null
.\"als S3 var:null
.\"als S4 var:null
.\"als S* var:null
.\"als RV var:null
.\"als RH var:null
.\"als RP var:null
.\"als TD var:null
.\"als TI var:null
.\"als XI var:null
.\"als XT var:null
.\"als page:num var:null
.\"als vF var:null
.\"als vH var:null
.\"als vO var:null
.\"als vC var:null
.xml:start
.\""""""""""""""""""""""""""""""""""""""""""""""""
