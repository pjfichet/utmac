.\" ux: translate to xml.
.ig
$Id: ux.tmac,v 0.17 2017/12/04 07:09:19 pj Exp pj $

Copyright (c) 2012
Pierre-Jean Fichet. All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the
following conditions are met:

  1. Redistributions of source code must retain the above
     copyright notice, this list of conditions and the
     following disclaimer.
  2. Redistributions in binary form must reproduce the
     above copyright notice, this list of conditions and the
     following disclaimer in the documentation and/or other
     materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
..
.do xflag 3
.warn w
.ds data-tmac ux
.nr data-ux 1
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" various macros
.de var:print
\&\\$*
..
.de var:null
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" strings definition
.ig
Since we use .char to translate "<" , ">" and "&", and since
";" might be translated to "\~;", we can't these glyphs to
build the xml file. We use #[ #] to define xml tags, and #(
#) to define chars.

Since troff usually print tags after a newline, we indicate
the newlines that need to be removed by #-

The dxml post processor will make a clean xml file from
this.
..
.ds xml-deline #-
.ds xml-tagbeg #[
.ds xml-tagend #]
.ds xml-glybeg #(
.ds xml-glyend #)
.ds xml-tag \\*[xml-tagbeg]\\$*\\*[xml-tagend]
.ds xml-gly \\*[xml-glybeg]\\$*\\*[xml-glyend]
.char < \\*[xml-gly lt]
.char > \\*[xml-gly gt]
.char & \\*[xml-gly amp]
.char - \-
.\" the detag pre-processor replace by strings
.\" tags inserted by the user. Escape these tags.
.ds #[ #~[
.ds #] #~]
.ds #( #~(
.ds #) #~)
.ds #- #~-
.ds #~ #~~
.de xml:print
.	\" print xml
.	br
.	fi
.	lang:xmlrchar
\&\\$*
.	br
.	lang:xmlchar
..
.\"""""""""""""""""""""""""""""""""""""""""""""""
.\" start and stop
.de xml:start
.	\" start xml file
.	em xml:stop
.	pl 1v
.	ll 60
.	na \" don't adjust
.	nh \" don't hyphenate
.	xml:print \\*[xml-tag ?xml version="1.0" encoding="UTF-8"?]
.	xml:print \\*[xml-tag UTMAC]
.	\" format date
.	ie \\n[mo]<10 .lds month 0\\n[mo]
.	el .lds month \\n[mo]
.	ie \\n[dy]<10 .lds day 0\\n[dy]
.	el .lds  day \\n[dy]
.	ie \\n[hours]<10 .lds hours 0\\n[hours]
.	el .lds hours \\n[hours]
.	ie \\n[minutes]<10 .lds minutes 0\\n[mo]
.	el .lds minutes \\n[minutes]
.	ie \\n[seconds]<10 .lds seconds 0\\n[seconds]
.	el .lds seconds \\n[seconds]
.	lds data-date1 \\n[year]-\\*[month]-\\*[day]
.	lds data-date2 \\*[hours]:\\*[minutes]:\\*[seconds]
.	xml:print \\*[xml-tag DD]\\*[data-date1]\
T\\*[data-date2]\\*[xml-tag /DD]
.	xml:print \\*[xml-tag DG]heirloom \
nroff -mux\\*[xml-tag /DG]
..
.de xml:stop
.	\" stop xml file
.	pl \\n(nlu +3v
.	if d xml-block \{\
.		xml:print \\*[xml-deline]
.		xml:print \\*[xml-block]
.	\}
.	xml:print \\*[xml-tag /UTMAC]
.	pl \\n(nlu
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" block macros
.de xml:block1
.	\" multine line block
.	while \\n(.$ \{\
.		de \\$1
.			if d xml-block \{\
.			xml:print \\*[xml-deline]
.			xml:print \\\\*[xml-block]
.			\}
.			sp 1v
.			xml:print \\*[xml-tag \\$1]
.			xml:print \\*[xml-deline]
.			ds xml-block \\*[xml-tag /\\$1]
\\..
.		shift
.	\}
..
.de xml:block2
.	\" single line block
.	while \\n(.$ \{\
.		de \\$1
.			ie d xml-block \{\
.			xml:print \\*[xml-deline]
.			xml:print \\\\*[xml-block]
.			rm xml-block
.			\}
.			sp 1v
.			xml:print \\*[xml-tag \\$1]\\\\$*\\*[xml-tag /\\$1]
\\..
.		shift
.	\}
..
.xml:block1 PB PP PC PQ PL PR
.xml:block2 DA DF DI DK DS DT H1 H2 H3 H4
.de xml:PX
.	if d xml-block \{\
.	xml:print \\*[xml-deline]
.	xml:print \\\\*[xml-block]
.	\}
.	sp 1v
.	ie \\n(.$=0 .xml:print \\*[xml-tag PX]
.	el .xml:print \\*[xml-tag PX name=\'\\$1\'] 
.	xml:print \\*[xml-deline]
.	ds xml-block \\*[xml-tag /PX]
.	lang:xmlrchar
.	nf
..
.als PX xml:PX
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Lists
.de PI
.	ie d xml-block \{\
.		ie '\\*[xml-block]'\\*[xml-tag /PI]\\*[xml-tag /PLIST]' \{\
.			xml:print \\*[xml-deline]
.			xml:print \\*[xml-tag /PI]
.		\}
.		el \{\
.			xml:print \\*[xml-deline]
.			xml:print \\\\*[xml-block]
.			sp 1v
.			xml:print \\*[xml-tag PLIST]
.			xml:print \\*[xml-deline]
.		\}
.	\}
.	el \{\
.		sp 1v
.		xml:print \\*[xml-tag PLIST]
.		xml:print \\*[xml-deline]
.	\}
.	xml:print \\*[xml-tag PI]
.	xml:print \\*[xml-deline]
.	if \\n(.$ \\$*:
.	ds xml-block \\*[xml-tag /PI]\\*[xml-tag /PLIST]
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Notes
.nr margin-num 0 1
.	\" print an unbreakable thin space before number
.ds * \U'202F'\\*[xml-tagbeg]NN num=\'\\n+[margin-num]\'/\\*[xml-tagend]
.nr note-in 0
.de NT
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag NT]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NT]
..
.de NB
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag NB]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NB]
..
.de NS
.	nr note-in 1
.	xml:print \\*[xml-deline]
.	ie \\n(.$ .xml:print \\*[xml-tag NS]
.	el .xml:print \\*[xml-tagbeg]NS\ num=\'\\n[margin-num]\'\\*[xml-tagend]
.	xml:print \\*[xml-deline]
.	ds xml-line \\*[xml-tag /NS]
..
.de NE
.	nr note-in 0
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-line]
.	rm xml-line
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" fonts
.ds font-bold0 \\*[xml-tag /B]
.ds font-bold1 \\*[xml-tag B]
.ds font-ital0 \\*[xml-tag /I]
.ds font-ital1 \\*[xml-tag I]
.ds font-caps0 \\*[xml-tag /C]
.ds font-caps1 \\*[xml-tag C]
.ds font-acro0 \\*[xml-tag /A]
.ds font-acro1 \\*[xml-tag A]
.ds font-uper0 \\*[xml-tag /U]
.ds font-uper1 \\*[xml-tag U]
.ds font-loer0 \\*[xml-tag /L]
.ds font-loer1 \\*[xml-tag L]
.ds font-fina0 \\*[xml-tag /F]
.ds font-fina1 \\*[xml-tag F]
.ds font-mono0 \\*[xml-tag /M]
.ds font-mono1 \\*[xml-tag M]
.ds B \ER'f-b 1-\En[f-b]'\E*[font-bold\En[f-b]]
.ds I \ER'f-i 1-\En[f-i]'\E*[font-ital\En[f-i]]
.ds C \ER'f-c 1-\En[f-c]'\E*[font-caps\En[f-c]]
.ds A \ER'f-a 1-\En[f-a]'\E*[font-acro\En[f-a]]
.ds U \ER'f-u 1-\En[f-u]'\E*[font-uper\En[f-u]]
.ds L \ER'f-l 1-\En[f-l]'\E*[font-loer\En[f-l]]
.ds F \ER'f-f 1-\En[f-f]'\E*[font-fina\En[f-f]]
.ds M \ER'f-m 1-\En[f-m]'\E*[font-mono\En[f-m]]
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" vgrind
.de xml:vgrind
.	\" build fonts used by vgrind
.	while \\n(.$ \{\
.		ds +\\$1 \\*[xml-tag code\\$1]
.		ds -\\$1 \\*[xml-tag /code\\$1]
.		shift
.	\}
..
.xml:vgrind K V C S
.\"char - \[u002D] \" for groff
.ds - \-
.ds _ _
.ds e \e
.als vS xml:PX
.de vE
.	br
.	xml:print \\*[xml-deline]
.	xml:print \\*[xml-tag /PX]
.	rm xml-block
.	fi
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" Index macros
.nr idx-args 0
.de LP
.	\" text to print
.	ds idx-text \\$1
.	ds idx-end \\$2
.	ds idx-beg \\$3
..
.de idx:print
.	\" Insert a keyword
.	\" If it exists, print text defined by LP macro
.	\" $1: idx key
.	\" $2: keyword
.	ie d idx-text \{\
.		xml:print \\*[idx-beg]\\*[xml-tag L\\$1 name=\'\\$2\']\\*[idx-text]\\*[xml-tag /L\\$1]\\*[idx-end]
.	\}
.	el \{\
.		xml:print \\*[xml-tag L\\$1 name=\'\\$2\'/]
.		xml:print \\*[xml-deline]
.	\}
.	rm idx-text
.	rm idx-beg
.	rm idx-end
..
.de idx:link
.	\" Print link using text defined by .LP macro if it exists
.	if !d idx-text \{\
.		ds idx-text \\$2
.		ds idx-end \\$3
.		ds idx-beg \\$4
.	\}
.	xml:print \\*[idx-beg]\\*[xml-tag L\\$1 name=\'\\$2\']\\*[idx-text]\\*[xml-tag /L\\$1]\\*[idx-end]
.	rm idx-text
.	rm idx-beg
.	rm idx-end
..
.de LA
.	idx:print A \\$*
..
.de LK
.	idx:print K \\$*
..
.de LN
.	idx:print N \\$*
..
.de LO
.	idx:print O \\$*
..
.de LT
.	idx:print T \\$*
..
.de LW
.	idx:print W \\$*
..
.de LL
.	idx:link L \\$*
..
.de LM
.	idx:link M \\$*
..
.de LU
.	idx:link U \\$*
..
.\""""""""""""""""""""""""""""""""""""""
.\" Usefull tests
.de US
.	\" execute command depending of used macro
.	ie "\\$1"!" \{\
.		shift
.		if !r data-\\$1 \{\
.			shift
\\$*
.		\}
.	\}
.	el .if r data-\\$1 \
.		if \\n[data-\\$1]>0 \{\
.			shift
\\$*
.		\}
..
.\""""""""""""""""""""""""""""""""""""""""""""""""
.\" source macros
.so \V[TROFFMACS]/u-ref
.ie "\V[UTMAC]"" .so \V[TROFFMACS]/u-en
.el .so \V[UTMAC]
.RO \" remove opcit
.\""""""""""""""""""""""""""""""""""""""""""""""""
.als H0 var:null
.als H* var:null
.als S1 var:null
.als S2 var:null
.als S3 var:null
.als S4 var:null
.als S* var:null
.als RV var:null
.als RH var:null
.als RP var:null
.als TD var:null
.als TI var:null
.als XI var:null
.als XT var:null
.als page:num var:null
.als vF var:null
.als vH var:null
.als vO var:null
.als vC var:null
.xml:start
.\""""""""""""""""""""""""""""""""""""""""""""""""
